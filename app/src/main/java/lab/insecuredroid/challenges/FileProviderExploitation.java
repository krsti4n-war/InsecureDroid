package lab.insecuredroid.challenges;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;

import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import org.apache.commons.io.IOUtils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;

import lab.insecuredroid.R;

public class FileProviderExploitation extends Fragment {
    private static final int PERMISSIONS_CODE = 1;
    private static final int PICK_CODE = 2;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_file_provider_exploitation, container, false);

        Button retrieveFileButton = view.findViewById(R.id.retrieve_file_button);
        Button chooseImageButton = view.findViewById(R.id.choose_image_button);
        Button hintButton = view.findViewById(R.id.hint_button);
        TextView hintTextView = view.findViewById(R.id.hint_text_view);

        retrieveFileButton.setOnClickListener(v -> retrieveFile());
        chooseImageButton.setOnClickListener(v -> checkPermissions());

        hintButton.setOnClickListener(v -> hintTextView.setText(R.string.file_provider_exploitation_hint));

        return view;
    }

    private void retrieveFile() {
        FirebaseStorage storage = FirebaseStorage.getInstance();
        StorageReference storageRef = storage.getReference().child("notes.txt");

        File localFile = new File(requireActivity().getFilesDir(), "secret_note/notes.txt");
        localFile.getParentFile().mkdirs();

        // Download the file to the local path
        storageRef.getFile(localFile)
                .addOnSuccessListener(taskSnapshot -> Toast.makeText(requireContext(), "File successfully retrieved!", Toast.LENGTH_SHORT).show())
                .addOnFailureListener(exception -> Toast.makeText(requireContext(), "Failed to retrieve the file...", Toast.LENGTH_SHORT).show());
    }

    private void checkPermissions() {
        String[] permissions = new String[]{Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE};
        boolean allPermissionsGranted = true;
        for (String permission : permissions) {
            if (ContextCompat.checkSelfPermission(requireContext(), permission)
                    != PackageManager.PERMISSION_GRANTED) {
                allPermissionsGranted = false;
                break;
            }
        }

        if (allPermissionsGranted) {
            pickImage();
        } else {
            requestPermissions(permissions, PERMISSIONS_CODE);
        }
    }

    private void pickImage() {
        Intent pickerIntent = new Intent(Intent.ACTION_PICK);
        pickerIntent.setType("image/*");
        startActivityForResult(pickerIntent, PICK_CODE);
    }

    private File storeImage(Uri uri) {
        try {
            File imageDir = new File(requireContext().getFilesDir(), "images");
            if (!imageDir.exists()) {
                imageDir.mkdirs();
            }

            File imageFile = new File(imageDir, "my_image.jpg");

            InputStream inputStream = requireContext().getContentResolver().openInputStream(uri);
            OutputStream outputStream = Files.newOutputStream(imageFile.toPath());
            IOUtils.copy(inputStream, outputStream);

            return imageFile;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PERMISSIONS_CODE) {
            boolean allPermissionsGranted = true;
            for (int grantResult : grantResults) {
                if (grantResult != PackageManager.PERMISSION_GRANTED) {
                    allPermissionsGranted = false;
                    break;
                }
            }

            if (allPermissionsGranted) {
                pickImage();
            } else {
                // Handle permission denial
                Toast.makeText(requireContext(),"Application require permissions...", Toast.LENGTH_LONG).show();
            }
        }
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == PICK_CODE && resultCode == Activity.RESULT_OK && data != null) {
            Uri imageUri = data.getData();
            if (imageUri != null) {
                File imageFile = storeImage(imageUri);
                if (imageFile != null) {
                    // Image file is successfully stored, you can further process or use it
                    Toast.makeText(requireContext(),"Pictures stored successfully", Toast.LENGTH_LONG).show();
                } else {
                    // Handle file storing failure
                    Toast.makeText(requireContext(),"Error when trying to store the images...", Toast.LENGTH_LONG).show();
                }
            }
        }
    }
}